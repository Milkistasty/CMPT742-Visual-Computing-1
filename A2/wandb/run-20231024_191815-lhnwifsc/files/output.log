Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 0 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 1 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 2 --- Loss: 0.0000
C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ..\aten\src\ATen\native\TensorShape.cpp:3484.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\functional.py:4236: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.
  warnings.warn(
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 3 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 4 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 5 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 572, 572])
torch.Size([4, 1, 572, 572])
batch 6 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([2, 1, 572, 572])
torch.Size([2, 1, 572, 572])
batch 7 --- Loss: 0.0000
Epoch 1 / 20 --- Loss: 0.0000
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
Shape after opening and resizing: torch.Size([572, 572])
Shape after data augmentation: torch.Size([572, 572])
Final shape: torch.Size([1, 572, 572])
torch.Size([4, 1, 1, 572, 572])
Traceback (most recent call last):
  File "c:\Users\Alienware\Desktop\VC CMPT742\A2\assignment_2\train.py", line 125, in <module>
    pred = model(image)
           ^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py", line 1538, in _call_impl
    result = forward_call(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Alienware\Desktop\VC CMPT742\A2\assignment_2\model.py", line 109, in forward
    x1, x_before_pool1 = self.down1(x)
                         ^^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Alienware\Desktop\VC CMPT742\A2\assignment_2\model.py", line 49, in forward
    x_before_pool = self.conv_block(x)
                    ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Alienware\Desktop\VC CMPT742\A2\assignment_2\model.py", line 30, in forward
    x = self.conv1(x)
        ^^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\conv.py", line 463, in forward
    return self._conv_forward(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Alienware\AppData\Local\Programs\Python\Python311\Lib\site-packages\torch\nn\modules\conv.py", line 459, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: Expected 3D (unbatched) or 4D (batched) input to conv2d, but got input of size: [4, 1, 1, 572, 572]